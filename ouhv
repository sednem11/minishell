int		ft_strlen_updated(char *line)
{
	int	i;

	i = 0;
	while(line[i] && line[i] != '$')
	{
		i++;
	}
	return(i);
}

char	**get_expansion2(t_main *main, char *fakeargs, int *check)
{
	char	**expansion;
	char	**new;
	int		i;
	int		j;
	int		k;

	i = 0;
	k = 0;
	new = calloc(sizeof(char *), 100);
	while(fakeargs[i])
	{
		j = 0;
		if (fakeargs[i] == '$')
		{
			check = check_paired(&fakeargs[i + 1], main->env, main->export,
			ft_strlen_updated(&fakeargs[i + 1]));
			if (check[0] != -1)
			{
				expansion = ft_split(&main->env[check[0]]
					[find_equal(main->env[check[0]]) + 1], ' ');
				while (expansion[j])
				{
					new[k] = ft_strdup(expansion[j]);
					free(expansion[j]);
					k++;
					j++;
				}
				free(expansion);
				free(check);
			}
		}
		i++;
	}
	return(new);
}

void	get_expansion(t_main *main, t_cmd *cmd, char *fakeargs)
{
	char	**expansion;
	int 	*check;
	int		i;
	int		j;

	i = 0;
	check = check_paired(&fakeargs[1], main->env, main->export,
			ft_strlen_updated(&fakeargs[1]));
	if (check[0] != -1)
	{
		expansion = get_expansion2(main, fakeargs, check);
		j = 0;
		while (expansion[j])
		{
			cmd->args[i] = ft_strdup(expansion[j]);
			free(expansion[j]);
			i++;
			j++;
		}
		free(expansion);
	}
}

void	check_for_expansion(t_cmd *cmd, char **fakeargs, t_main *main)
{
	int		i;
	int		k;

	i = 0;
	k = 0;
	while (fakeargs[k])
	{
		if (ft_strncmp(fakeargs[k], "$", 1) == 0
			&& fakeargs[k][1] != '?' && fakeargs[k][1]
			&& check_dolar(main->user_input) == 1)
			get_expansion(main, cmd, fakeargs[k]);
		else
		{
			cmd->args[i] = ft_strdup(fakeargs[k]);
			i++;
		}
		free(fakeargs[k]);
		k++;
	}
}