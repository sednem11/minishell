// static int	count_words2(char const *s, char c)
// {
// 	size_t	i;
// 	size_t	j;
// 	int		check;

// 	j = 0;
// 	i = 0;
// 	check = 1;
// 	while (s[i])
// 	{
// 		if ((s[i] == '>' || s[i] == '<') && check == 1)
// 			return (j);
// 		if (s[i] != c && check == 1)
// 		{
// 			j++;
// 			check = 0;
// 		}
// 		else if (s[i] == c)
// 			check = 1;
// 		i++;
// 	}
// 	return (j);
// }

char	**ft_split2(char const *s, char c)
{
	int		i;
	int		k;
	int		j;
	char	**ptr;
	int		flag;

	flag = 0;
	i = 0;
	j = 0;
	ptr = ft_calloc(100, sizeof (char *));
	// ptr = malloc((count_words2(s, c) + 1) * sizeof(char *));
	// if (!ptr)
	// 	return (NULL);
	while (s[i])
	{
		k = 0;
		while (s[i] == c || s[i] == '>' || s[i] == '<' || flag == 1)
		{
			if (s[i] == '>' || s[i] == '<')
				flag = 1;
			else if(s[i] == c && k == 1)
				flag = 0;
			if ((s[i] == '>' || s[i] == '<') && s[i + 1] != c && s[i + 1] != '>' && s[i + 1] != '<')	// echo hello >   out how
				k = 1;
			else if ((s[i] == '>' || s[i] == '<') && s[i + 1] == c)
				k = 0;
			else if (s[i] != '>' && s[i] != '<' && s[i + 1] != c)
				k = 1;
			i++;
		}
		if (s[i] != '\0' && s[i] != c)
		{
			ptr[j] = word_aloc(s + i, c);
			j++;
		}
		while (s[i] && s[i] != c)
			i++;
	}
	// ptr[j] = NULL;
	return (ptr);
}
